--- a/preprocess_data.py
+++ b/preprocess_data.py
@@ -128,15 +128,26 @@
 def convert_midi_to_wav(midi_path: Path) -> bool:
     try:
         score = music21.converter.parse(midi_path)
-        # Calculate duration and chop if needed
-        tempo = 120
+        
+        # --- CORRECTED DURATION LOGIC ---
+        # 1. Determine the tempo in beats per minute (BPM).
+        tempo_bpm = 120.0  # A sensible default
         mm_boundaries = score.metronomeMarkBoundaries()
         if mm_boundaries:
-            tempo = mm_boundaries[0][-1].number
+            tempo_bpm = mm_boundaries[0][-1].number
+        
+        # 2. Convert BPM to beats per second (BPS).
+        beats_per_second = tempo_bpm / 60.0
+        
+        # 3. Calculate the target offset in music21's native unit (quarter lengths).
+        end_offset_in_quarter_lengths = CHUNK_DURATION * beats_per_second
+        
+        # 4. Use the shorter of the two durations (target chunk vs. full song).
+        final_chop_duration_ql = min(end_offset_in_quarter_lengths, score.duration.quarterLength)
 
-        duration_in_seconds = min(CHUNK_DURATION, score.duration.quarterLength * 60.0 / tempo)
-        chopped_score = score.getElementsByOffset(0, duration_in_seconds, includeEndBoundary=True)
+        # 5. Chop the score using the calculated quarter length duration.
+        chopped_score = score.getElementsByOffset(0.0, final_chop_duration_ql, includeEndBoundary=True)
+        # --- END OF CORRECTED LOGIC ---
 
         # Save chopped MIDI temporarily
         pid = os.getpid()
@@ -181,14 +192,20 @@
     def extract_abc_from_midi(midi_path: Path) -> bool:
         try:
             score = music21.converter.parse(midi_path)
-            
-            # Apply same chopping logic as in wav conversion
-            tempo = 120
+
+            # --- APPLY IDENTICAL CORRECTED DURATION LOGIC ---
+            tempo_bpm = 120.0
             mm_boundaries = score.metronomeMarkBoundaries()
             if mm_boundaries:
-                tempo = mm_boundaries[0][-1].number
-            
-            duration_in_seconds = min(CHUNK_DURATION, score.duration.quarterLength * 60.0 / tempo)
-            chopped_score = score.getElementsByOffset(0, duration_in_seconds, includeEndBoundary=True)
-            
+                tempo_bpm = mm_boundaries[0][-1].number
+
+            beats_per_second = tempo_bpm / 60.0
+            end_offset_in_quarter_lengths = CHUNK_DURATION * beats_per_second
+            final_chop_duration_ql = min(end_offset_in_quarter_lengths, score.duration.quarterLength)
+
+            chopped_score = score.getElementsByOffset(0.0, final_chop_duration_ql, includeEndBoundary=True)
+            # --- END OF CORRECTED LOGIC ---
+
             abc_string = music21.converter.freezeStream(chopped_score, fmt='abc')
             
             # Save ABC notation